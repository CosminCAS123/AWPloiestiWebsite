@page "/ConfigureTournament"
@using AWPloiesti.Models
@using AWPloiesti.Services
@inject ITournamentService tournamentService
@inject IUserService userService

<!-- Participant Registration EditForm -->
<!-- Participant Registration EditForm -->
<EditForm Model="@participantModel" OnValidSubmit="RegisterParticipant">
    <DataAnnotationsValidator />

    

    <div class="form-container">
        <div class="mt-4">
            <label for="participantName" class="form-label">Nume participant</label>
            <InputText id="participantName" class="form-control" @bind-Value="participantModel.FullName" />
            <ValidationMessage For="@(() => participantModel.FullName)" />
        </div>
        <button type="submit" class="btn btn-primary mt-2">Înregistrează participant</button>
        <!-- Display the number of participants -->
        <div class="mt-3">
            <label class="form-label">Număr participanți: @participants.Count</label>
        </div>
    </div>
</EditForm>

<!-- Tournament Creation EditForm -->
<EditForm Model="@tournamentModel" OnValidSubmit="CreateTournament">
    <DataAnnotationsValidator />

    
   
    <div class="form-container">
        <div class="mt-4">
            <label for="tournamentName" class="form-label">Numele turneului</label>
            <InputText id="tournamentName" class="form-control" @bind-Value="tournamentModel.TournamentName" />
            <ValidationMessage For="@(() => tournamentModel.TournamentName)" />
        </div>
        <button type="submit" class="btn btn-success mt-2">Start turneu</button>
    </div>
</EditForm>

<Preload Class = "mt-3" LoadingText="@preloadMessage" ></Preload>

@code {
    private Tournament tournamentModel = new Tournament();
    private Participant participantModel = new Participant();
    private List<Participant> participants = new List<Participant>();
    private string preloadMessage = string.Empty;

    private const string ADDING_PARTICIPANTS = "Se adauga participantii...";
    private const string CREATING_TOURNAMENT = "Se creeaza turneul...";


    [Inject] protected PreloadService preloadService { get; set; } = default!;
    
    
    private void RegisterParticipant()
    { 
        participants.Add(new Participant { FullName = participantModel.FullName , Wins = 0 , Losses = 0 }); 
    }

    private async Task CreateTournament()
    {

        this.tournamentModel.Status = TournamentStatus.Started;

        //add tournament to tournaments table
        //add users in the database
        //assign each user the current tournament ID.

        //start preload
        this.preloadMessage = CREATING_TOURNAMENT;
        StateHasChanged();
        this.preloadService.Show(SpinnerColor.Info);
        
        await Task.Delay(1000);
        await this.tournamentService.AddTournamentAsync(tournamentModel);
        this.preloadMessage = ADDING_PARTICIPANTS;
        StateHasChanged();

        await Task.Delay(1000);
        await this.userService.AddParticipantsAsync(this.participants, tournamentModel.TournamentID);
        this.preloadMessage = "GATA!!!";
        StateHasChanged();

        await Task.Delay(2000);
        this.preloadService.Hide();


    }
}